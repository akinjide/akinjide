#!/usr/bin/env node

var path = require('path')
var args = {
  serve: false,
  watch: false,
  environment: (process.argv[2] || 'development')
}

detect(args)


function detect(args) {
  process.argv.forEach(function(argv, i) {
    switch (argv) {
      case '-s':
      case '--serve':
        args.serve = true
        break

      case '-w':
      case '--watch':
        args.watch = true
        break
    }
  })
}

process.env.NODE_ENV = args.environment

require(resolve('lib') + '/check-versions')()

var fs = require('fs')
var spawn = require('child_process').spawn
var minifier = require('minifier')
var ProgressBar = require('progress')
var yaml = require('js-yaml')
var jade = require('jade')
var gaze = require('gaze')
var bs = require('browser-sync')

var bsConfig = require('../lib/bs-config')
var sync = bs.create('server')
var isDevelopment = args.environment == 'development'
var log = console.log.bind(console)
var loadedFiles = yaml.safeLoad(read(resolve('config') + '/', 'files.yml'))

var filesPath = Object
  .keys(loadedFiles)
  .map(function(key, index) {
    return [].concat(
      loadedFiles[key]['index'],
      loadedFiles[key]['error']
    )
  })
  .join(',')
  .split(',')


if (!filesPath.length) {
  log('-- missing files path or files.yml')
  process.exit(1)
}


minifier.on('error', function(e) {
  log('-- minifier error', e)
  process.exit(1)
})


function generateConfigurations(configurations, length) {
 return configurations.reduce(function(configs, config, i) {
    var cache = {}

    if (config.gen) {
      var j = 0

      while (j < config.gen.length) {
        cache[config.gen[j]] = squashed(length) + config.ext
        j++;
      }
    }

    configs[config.fileext] = cache
    return configs
  }, {})
}

function minify(isDev, fn, cb) {
  log('-- using %s', args.environment)

  var CONFIGURATIONS_FILE_LENGTH = 20
  var configurations = generateConfigurations([
    { gen: ['index', 'error'], ext: '.min.css', fileext: 'css' },
    { gen: ['index', 'error'], ext: isDev ? '.dev.js' : '.min.js', fileext: 'javascript' }
  ], CONFIGURATIONS_FILE_LENGTH)

  var bar = new ProgressBar('-- minifing objects:  :percent (:current/:total), :etas ETA/s [:title]', {
    complete: '█',
    incomplete: '░',
    width: Math.floor(process.stdout.columns / 2),
    total: filesPath.length
  })

  for (var i in loadedFiles) {
    for (var j in loadedFiles[i]) {
      (loadedFiles[i][j]).forEach(function() {
        bar.tick({ title: process.cwd() + '/' + filesPath[bar.curr] })
      })

      munch(loadedFiles[i][j], configurations[i][j], (function (i, j) {
        if (i == 'javascript' && (j == 'index' || j == 'error')) {
          if (isDev) {
            return {
              uglify: {
                output: {
                  beautify: true,
                  bracketize: true,
                  indent_level: 2,
                  width: 100,
                  comments: true,
                  wrap_iife: true,
                  max_line_len: 320000
                },
                compressor: {},
                mangle: false
              }
            }
          }

          if (!isDev) {
            return {
              uglify: {
                output: {
                  beautify: false,
                  bracketize: true,
                  wrap_iife: true,
                  max_line_len: 320000
                },
                compressor: {},
                mangle: false
              }
            }
          }
        }

        return {}
      } (i, j)) )
    }
  }

  if (bar.complete) {

    // TODO: disable filename regeneration
    // if 'config/sjc.yml' exists and on develop;
    // then don't recreate
    // else
    // if 'config/sjc.yml' exists and on production
    // then recreate
    // if 'config/sjc.yml' !exists and on develop
    // then create
    // if 'config/sjc.yml' !exists and on production
    // then create

    // fs.stat err.code == 'ENOENT'

    writeYMLToDisk('config/sjc.yml', dumpObjectToYML(configurations), function() {
      log('-- minification complete')
      fn(isDev, cb)
    })
  }
}

function compile(isEnabled, cb) {
  var options = {
    pretty: isEnabled,
    self: true,
    debug: isEnabled,
    compileDebug: isEnabled,
    cache: !isEnabled,
    globals: [
      'process'
    ]
  }

  // Compile the source code
  var TOTAL_FILE_OUTPUT = 2
  var locals = transformArrayToObject(
    parseYMLToJSON([
      'cfn.yml',
      'store.yml',
      'sjc.yml'
    ])
  )

  if (locals) {
    ([{ filename: '404', ext: '.html' }, { filename: 'index', ext: '.html' }]).map(function(output) {
      writeHTMLToDisk(
        output.filename + output.ext,
        jade.compileFile('src/' + output.filename + '.jade', options),
        locals,
        callback
      )
    })

    function callback(err, result) {
      callback.called++
      if (callback.called == TOTAL_FILE_OUTPUT) cb(null, 'done')
    }

    // because everything's an {} in JavaScript!
    callback.called = 0
  }
}

function build(isDev, cb) {
  console.time('-- compileTime')
  minify(isDev, compile, cb)
}


build(isDevelopment, function(err, done) {
  log('-- %s [%s]', done, new Date())
  console.timeEnd('-- compileTime')

  if (isDevelopment && (args.serve && args.watch)) {
    return (
      watcher(true),
      server()
    )
  }

  if (isDevelopment && args.watch) return watcher(false)
  if (args.serve) return server()
})


///////////////////////


function watcher(serve) {
  gaze([
    resolve('static') + '/**/*',
    resolve('config') + '/**/+(cfn|store|files).yml',
    resolve('src') + '/**/*'
  ], function(err, watcher) {
    log('-- watching %s directories', Object.keys(this.watched()).length)

    log(this.watched())

    this.on('all', function(event, filepath) {
      log(event, filepath)
      build(isDevelopment, function(err, done) {
        log('-- Regenerated site %s [%s]', done, new Date())

        if (serve) {
          sync.reload()
        }

        console.timeEnd('-- compileTime')
      })
    })
  })
}

function server() {
  sync.init(bsConfig, function(err, syncs) {
    if (syncs.active) {
      sync.notify('-- listening ' + bsConfig.ui.port, 2000)
      log('-- serving *.*')
    }
  })
}

function munch(filetype, filename, options) {
  var payload = {
    output: 'build/' + filename,
    noComments: true
  }

  if (options && Object.keys(options).length) Object.assign(payload, options)
  minifier.minify(filetype, payload)
}

function writeYMLToDisk(filename, payload, cb) {
  fs.writeFile(filename, payload, function(err, result) {
    if (err) throw err

    log('-- *.yml file has been saved')
    cb(null, result)
  })
}

function writeHTMLToDisk(filename, fn, locals, cb) {
  fs.writeFile(filename, fn(locals), function(err, result) {
    if (err) throw err

    log('-- *.html file saved')
    cb(null, result)
  })
}

function dumpObjectToYML(payload) {
  return yaml.safeDump(payload, { 'sortKeys' : true })
}

function resolve(dir) {
  return path.join(__dirname, '..', dir)
}

function squashed(length) {
  var iterator = 0
  var result = []
  var COMB = (
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqurstuwxyz' +
    '1234567890' +
    '_-'
  ).split('')
  var squashed = ''

  for (iterator; iterator < length; iterator++) {
    result.push(COMB[Math.floor(Math.random() * COMB.length - iterator) + iterator])
  }

  return result.join('')
}

function parseYMLToJSON(files) {
  log('-- parsing %s', files.join(', '))
  return files.map(function(file) {
    try {
      return yaml.safeLoad(read(path.join(__dirname, '..', 'config/'), file))
    } catch (e) {
      throw e
    }
  })
}

function read(dir, file) {
  log('-- reading %s', file)
  return fs.readFileSync(dir + file, {
    encoding: 'utf8',
    flag: 'r'
  })
}

function transformArrayToObject(data) {
  log('-- transforming parsed *.yml')
  return data.reduce(function(col, datum, i) {
    return Object.assign(col, datum)
  }, {})
}
