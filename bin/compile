#!/usr/bin/env node

var path = require('path')

require(resolve('lib') + '/check-versions')()

var minifier = require('minifier')
var ProgressBar = require('progress')
var yaml = require('js-yaml')
var jade = require('jade')
var gaze = require('gaze')
var fs = require('fs')
var spawn = require('child_process').spawn
var environment = process.argv[2] || 'development'
var isDevelopment = environment == 'development'
var files = yaml.safeLoad(read(resolve('config') + '/', 'static.yml'))
var filesF = Object.keys(files).length
var configurations = {}

if (!filesF) return

minifier.on('error', function(e) {
  console.log('-- minifier error', e)
  process.exit(1)
})

function minify(isDev, fn, cb) {
  console.log('-- using %s', environment)

  var suffix = {
    css: '.min.css',
    js: isDev ? '.dev.js' : '.min.js'
  }
  var options = {
    production: {
      uglify: {
        output: {
          beautify: false,
          bracketize: true,
          wrap_iife: true,
          max_line_len: 320000
        },
        compressor: {},
        mangle: false
      }
    },
    development: {
      uglify: {
        output: {
          beautify: true,
          bracketize: true,
          indent_level: 2,
          width: 100,
          comments: true,
          wrap_iife: true,
          max_line_len: 320000
        },
        compressor: {},
        mangle: false
      }
    }
  }

  var bar = new ProgressBar('-- minifing objects:  :percent (:current/:total), :etas ETA/s [:title]', {
    complete: '█',
    incomplete: '░',
    width: Math.floor(process.stdout.columns / 4),
    total: filesF
  })

  configurations['css'] = {
    index: squashed() + suffix.css,
    four0four: squashed() + suffix.css
  }

  configurations['javascript'] = {
    index: squashed() + suffix.js,
    four0four: squashed() + suffix.js
  }

  for (var prop in files) {
    bar.tick({ title: bar.curr })
    var useConf = ''

    switch(prop) {
      case 'cssIndex':
        useConf = configurations.css.index
        break
      case 'cssError':
        useConf = configurations.css.four0four
        break
      case 'jsIndex':
        useConf = configurations.javascript.index
        break
      case 'jsError':
        useConf = configurations.javascript.four0four
        break
    }

    munch(files[prop], useConf, (function (prop) {
      if (['jsIndex', 'jsError'].includes(prop)) {
        if (isDev) {
          return options.development;
        }

        if (!isDev) {
          return options.production;
        }
      }

      return {};
    }(prop)))
  }

  if (bar.complete) {
    writeYMLToDisk('config/sjc.yml', dumpObjectToYML(configurations), function() {
      console.log('-- minification complete')
      fn(isDev, cb)
    })
  }
}

function compile(isEnabled, cb) {
  var options = {
    pretty: isEnabled,
    self: true,
    debug: isEnabled,
    compileDebug: isEnabled,
    cache: isEnabled,
    globals: []
  }

  var YMLs = [
    'config.yml',
    'data.yml',
    'sjc.yml'
  ]

  // Compile the source code
  var locals = transformArrayToObject(parseYMLToJSON(YMLs))

  writeHTMLToDisk('404.html', jade.compileFile('src/404.jade', options), locals)
  writeHTMLToDisk('index.html', jade.compileFile('src/index.jade', options), locals)
  cb(null, 'done')
}

function build(isDev, cb) {
  minify(isDev, compile, cb)
}


build(isDevelopment, function(err, done) {
  console.log('-- %s [%s]', done, new Date())

  if (isDevelopment && (process.argv[3] == '-w' || process.argv[3] == '--watch')) {
    gaze([
      resolve('static') + '/**/*',
      resolve('src') + '/**/*'
    ], function(err, watcher) {
      console.log('-- watching %s directories', Object.keys(this.watched()).length)

      this.add([
        resolve('config') + '/**/(config|data|static)\.yml$'
      ])

      this.on('all', function(event, filepath) {
        console.log(event, filepath)
        build(isDevelopment, function(err, done) {
          console.log('-- Regenerated site [%s]', new Date())
        })
      })
    })
  }

  if (process.argv[3] == '-s' || process.argv[3] == "--serve") {
    var uri = 'http://localhost:1334'
    var server = spawn('lib/serve')

    server.stdout.on('data', function(data) { console.log('-- stdout: %s', data) })
    server.stderr.on('data', function(data) { console.log('-- stderr: %s', data) })
    server.on('close', function(code) {
      console.log('-- close: %s', code)
      process.exit(code)
    })

    console.log('-- listening %s', uri)
  }
})


///////////////////////


function munch(filetype, filename, options) {
  var payload = {
    output: 'build/' + filename,
    noComments: true
  }

  if (options && Object.keys(options).length) Object.assign(payload, options)
  minifier.minify(filetype, payload)
}

function writeYMLToDisk(filename, payload, cb) {
  fs.writeFile(filename, payload, function(err, result) {
    if (err) throw err

    console.log('-- *.yml file has been saved')
    cb()
  })
}

function writeHTMLToDisk(filename, fn, locals) {
  fs.writeFile(filename, fn(locals), function(err, result) {
    if (err) throw err

    console.log('-- *.html file saved')
  })
}

function dumpObjectToYML(payload) {
  return yaml.safeDump(payload, { 'sortKeys' : true })
}

function resolve(dir) {
  return path.join(__dirname, '..', dir)
}

function squashed() {
  var iterator = 0
  var result = []
  var comb = (
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqurstuwxyz' +
    '1234567890' +
    '_-'
  ).split('')
  var squashed = ''

  for (iterator; iterator < 6; iterator++) {
    result.push(comb[Math.floor(Math.random() * comb.length - iterator) + iterator])
  }

  return result.join('')
}

function parseYMLToJSON(payload) {
  console.log('-- parsing %s', payload.join(', '))
  return payload.map(function(file) {
    try {
      return yaml.safeLoad(read(path.join(__dirname, '..', 'config/'), file))
    } catch (e) {
      throw e
    }
  })
}

function read(dir, file) {
  console.log('-- reading %s', file)
  return fs.readFileSync(dir + file, {
    encoding: 'utf8',
    flag: 'r'
  })
}

function transformArrayToObject(data) {
  console.log('-- transforming parsed *.yml')
  return Object.assign({}, data[0], data[1], data[2])
}
