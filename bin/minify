#!/usr/bin/env node

var minifier = require('minifier');
var ProgressBar = require('progress');
var yaml = require('js-yaml');
var fs = require('fs');
var path = require('path');
var args = process.argv;
var environment = args[2] || 'development';
var configurations = {};

var jsIndex = [
  'static/scripts/lib/jquery.easytabs.min.js',
  'static/scripts/lib/respond.min.js',
  'static/scripts/lib/jquery.prettyPhoto.js',
  'static/scripts/lib/jquery.isotope.min.js',
  'static/scripts/lib/jquery-ui-map.js',
  'static/scripts/lib/jquery.carouFredSel.js',
  'static/scripts/lib/plugins.js',
  'static/scripts/lib/jquery.validate.min.js',
  'static/scripts/lib/js.cookie-2.1.2.min.js',
  'static/scripts/lib/clipboard.min.js',
  'static/scripts/lib/html2canvas.min.js',
  'static/scripts/lib/vfs_fonts.js',
  'static/scripts/lib/pdfmake.min.js',
  'static/scripts/script.js'
];

var jsError = [
  'static/scripts/lib/typed.min.js',
  'static/scripts/404.js'
];

var cssIndex = [
  'static/styles/reset.css',
  'static/styles/style.css',
  'static/styles/prettyPhoto.css'
];

var cssError = [
  'static/styles/404.css'
];

minifier.on('error', function(e) {
  console.log('-- minifier error', e);
  process.exit(1);
});

var bar = new ProgressBar('-- minifing [:bar] :percent :etas :current/:total', {
  complete: '█',
  incomplete: '░',
  width: process.stdout.columns,
  total: (jsIndex.length + cssIndex.length + cssError.length + jsError.length)
});

var timer = setInterval(function () {
  bar.tick();

  if (bar.complete) {
    writeToDisk('config/sjc.yml', dumpObjectToYML(configurations));
    console.log('-- minification complete');
    clearInterval(timer);
  }
}, 100);


console.log('-- using %s', environment);

var suffix = '.min.css';
configurations['css'] = {
  index: squashed() + suffix,
  four0four: squashed() + suffix
};

// Build .min.css
munch(cssIndex, configurations.css.index);
munch(cssError, configurations.css.four0four);

// Build .min.js
if (environment == 'production') {
  var suffix = '.min.js';
  configurations['javascript'] = {
    index: squashed() + suffix,
    four0four: squashed() + suffix
  };

  munch(jsIndex, configurations.javascript.index);
  munch(jsError, configurations.javascript.four0four);
} else {
  var suffix = '.dev.js';
  var options = {
    uglify: {
      output: {
        beautify: true,
        bracketize: true,
        indent_level: 2,
        width: 100,
        comments: true,
        wrap_iife: true,
        max_line_len: 320000
      },
      compressor: {}
    }
  };

  configurations['javascript'] = {
    index: squashed() + suffix,
    four0four: squashed() + suffix
  };

  munch(jsIndex, configurations.javascript.index, options);
  munch(jsError, configurations.javascript.four0four, options);
}


////////////


function munch(filetype, filename, options) {
  var payload = {
    output: 'build/' + filename,
    noComments: true
  };

  if (options && Object.keys(options).length) Object.assign(payload, options);
  minifier.minify(filetype, payload);
}

function writeToDisk(filename, payload) {
  fs.writeFile(filename, payload, function(err, result) {
    if (err) throw err;

    console.log('-- *.yml file has been saved');
  });
}

function dumpObjectToYML(payload) {
  return yaml.safeDump(payload, { 'sortKeys' : true });
}

function squashed () {
  var iterator = 0;
  var result = [];
  var comb = (
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqurstuwxyz' +
    '1234567890' +
    '_-'
  ).split('');
  var squashed;

  for (iterator; iterator < 6; iterator++)
    result.push(comb[Math.floor(Math.random() * comb.length - iterator) + iterator]);

  return result.join('');
}
